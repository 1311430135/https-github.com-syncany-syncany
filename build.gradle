//
// Build script for main project
//

// Global Helpers //////////////////////////////////////////////////////////////

String execAndGetOutput(String command) {
	try {
		def stdout = new ByteArrayOutputStream()

		exec {
			workingDir rootProject.projectDir
			commandLine command.split()
			standardOutput = stdout
		}

		return stdout.toString().trim()
	}
	catch (Exception e) {
		return null
	}
}

String getRevision() {
	String currentCommit = execAndGetOutput("git rev-parse --short HEAD")
	return (currentCommit != null) ? currentCommit : "UNKNOWN"
}

boolean isApplicationRelease() {
	// Note: This must work for detached commits (git checkout -qf <commit>)

	String currentBranches = execAndGetOutput("git log -n 1 --pretty=%d HEAD")
	return currentBranches.contains("origin/master")
}


// Global Settings /////////////////////////////////////////////////////////////

project.ext {
	applicationVersion = "0.1.4-alpha"

	applicationRelease = isApplicationRelease()
	applicationDate = new Date()
	applicationRevision = getRevision()
	
	applicationVersionSnapshot = (!applicationRelease) ? "+SNAPSHOT.${applicationDate.format('yyMMddHHmm')}.git${applicationRevision}" : ""
	applicationVersionFull = "${applicationVersion}${applicationVersionSnapshot}"
}

// All projects settings  //////////////////////////////////////////////////////

repositories {
	mavenCentral()
}

apply plugin: "java"

dependencies {
	compile			project(":syncany-cli")
	compile			project(":syncany-lib")
	compile			project(":syncany-util")
	compile			project(":syncany-daemon")
      	
	testCompile		project(path: ":syncany-lib", configuration: "tests")
	testCompile		project(path: ":syncany-util", configuration: "tests")  	      
	testCompile		project(path: ":syncany-daemon", configuration: "tests")	
}

// Tasks ///////////////////////////////////////////////////////////////////////

apply from: 'gradle/gradle/application.gradle'
apply from: 'gradle/gradle/packaging.innosetup.gradle'
apply from: 'gradle/gradle/packaging.fpm.gradle'
apply from: 'gradle/gradle/development.fakeinstall.gradle'
apply from: 'gradle/gradle/reports.gradle'
apply from: 'gradle/gradle/javadoc.gradle'
apply from: 'gradle/gradle/tests.gradle'


// Sub-Project Settings and Hooks //////////////////////////////////////////////

subprojects {
	apply plugin: 'java'
	
	group = 'org.syncany'		
		
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	repositories {
		mavenCentral()
	}
	
	sourceSets {
		main {
			java      { srcDir 'src/main/java'}
			resources { srcDir 'src/main/resources'}
		}
		
		test {
			java      { srcDir 'src/test/java'}
			resources { srcDir 'src/test/resources'}
		}
	}
	
	processResources {	
		filter{ String line -> line.replaceAll('%applicationRelease%', "${applicationRelease}") }        	            
		filter{ String line -> line.replaceAll('%applicationVersion%', "${applicationVersion}") }        	            
		filter{ String line -> line.replaceAll('%applicationVersionFull%', "${applicationVersionFull}") }        	            
		filter{ String line -> line.replaceAll('%applicationRevision%', "${applicationRevision}") }
		filter{ String line -> line.replaceAll('%applicationDate%', "${applicationDate}") }          	            
	}		
	
	// JAR /////////////////////////////////////////////////////////////////////
	
	jar {
		baseName = "${project.name}"
		version  = "$applicationVersionFull"				
	}
}

// Gradle Wrapper Tasks (for local gradlew scripts) ////////////////////////////

task wrapper(type: Wrapper) {
	gradleVersion = '1.11'
	jarFile = 'gradle/wrapper/wrapper.jar'
}


// Task to clean build folder on project root //////////////////////////////////	

task cleanBuildDir(type: Delete) {
	delete 'build'	
}

tasks["clean"].dependsOn(cleanBuildDir)

