// Application Plugin Settings and Hooks ///////////////////////////////////////	

apply plugin: "application"

applicationName = "syncany"
mainClassName = "org.syncany.Syncany"

startScripts {
	defaultJvmOpts = [ "-Xmx2048m", "-Dfile.encoding=utf-8" ]
	
	doLast {
		def winFile = file getWindowsScript()
		def unixFile = file getUnixScript()

		winFile.text = winFile.text.replaceAll("(set CLASSPATH=.+)", 'set CLASSPATH=%APP_HOME%\\\\lib\\\\*;%AppData%\\\\Syncany\\\\plugins\\\\lib\\\\*')
		unixFile.text = unixFile.text.replaceAll("(CLASSPATH=\\\$APP_HOME.+)", 'CLASSPATH=\\\$APP_HOME/lib/*:~/.config/syncany/plugins/lib/*')
		
		// Post Java process commands: Delayed plugin JAR file deletion (Windows only)
		String winPurgeFileDeletionCommands = "@rem Delete plugin JARs\r\n"
		winPurgeFileDeletionCommands += "SET PURGEFILE=%AppData%\\\\Syncany\\\\purgefile\r\n";
		winPurgeFileDeletionCommands += "if exist %PURGEFILE% (\r\n";
		winPurgeFileDeletionCommands += "  @for /f %%b in (%PURGEFILE%) do del /q \"%%b\" 2>NUL\r\n";
		winPurgeFileDeletionCommands += "  del /q %PURGEFILE% 2>NUL\r\n";
		winPurgeFileDeletionCommands += ")\r\n\r\n";
		
		winFile.text = winFile.text.replaceAll("(:end)", "${winPurgeFileDeletionCommands}:end")
		
		def winTextTmp = ""
		def winText = winFile.text
		
		winText.readLines().each {
			line ->
				if (line.startsWith("\"%JAVA_EXE%\"")) {
					winTextTmp += "if \"%1\" == \"daemon\" (\r\n" 
					winTextTmp += "   @rem start daemon\r\n"
					winTextTmp += "   call %DIRNAME%syd.bat %2 %3 %4\r\n"
					winTextTmp += ") else (\r\n"
					winTextTmp += "   " + line + "\r\n"
					winTextTmp += ")"
				}
				else {
					winTextTmp += line + '\n'
				}
		}
		
		winFile.text = winTextTmp
		
		// Update unix text
		def unixTextTmp = ""
		def unixText = unixFile.text
		def unixDaemonScript = new File('gradle/daemon/syncanyd.skel').text		
		
		unixText.readLines().each {
			line ->
				if (line.startsWith("exec")) {
					unixTextTmp += unixDaemonScript.replace("#JAVA_EXEC_REPLACEMENT_MARKER#", line);
				}
				else {
					unixTextTmp += line + '\n'
				}
		}
		
		unixFile.text = unixTextTmp
	}
}

applicationDistribution.from("${rootProject.projectDir}/") {
	include "AUTHORS.md", "CHANGELOG.md", "LICENSE.md", "README.md"

	// Copy syncany(.bat) to sy(.bat)
	from("${startScripts.outputDir}/") {
		include "syncany"
		rename(/syncany/, 'sy')
		into "bin"
	}
}

distTar {
	baseName = "syncany"
	version = "$applicationVersionFull"
	compression = Compression.GZIP
	extension = "tar.gz"	
}

distZip {
	baseName = "syncany"
	version = "$applicationVersionFull"
}

