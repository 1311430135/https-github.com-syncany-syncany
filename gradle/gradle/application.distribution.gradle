// Application Plugin Settings and Hooks ///////////////////////////////////////	

apply plugin: "application"

applicationName = "syncany"
mainClassName = "org.syncany.Syncany"

startScripts {
	defaultJvmOpts = [ "-Xmx2048m", "-Dfile.encoding=utf-8" ]
	
	doLast {
		def winFile = file getWindowsScript()
		def unixFile = file getUnixScript()

		winFile.text = winFile.text.replaceAll("(set CLASSPATH=.+)", 'set CLASSPATH=%APP_HOME%\\\\lib\\\\*;%AppData%\\\\Syncany\\\\plugins\\\\lib\\\\*')
		unixFile.text = unixFile.text.replaceAll("(CLASSPATH=\\\$APP_HOME.+)", 'CLASSPATH=\\\$APP_HOME/lib/*:~/.config/syncany/plugins/lib/*')
		
		// Post Java process commands: Delayed plugin JAR file deletion (Windows only)
		String winPurgeFileDeletionCommands = "@rem Delete plugin JARs\r\n"
		winPurgeFileDeletionCommands += "SET PURGEFILE=%AppData%\\\\Syncany\\\\purgefile\r\n";
		winPurgeFileDeletionCommands += "if exist %PURGEFILE% (\r\n";
		winPurgeFileDeletionCommands += "  @for /f %%b in (%PURGEFILE%) do del /q \"%%b\" 2>NUL\r\n";
		winPurgeFileDeletionCommands += "  del /q %PURGEFILE% 2>NUL\r\n";
		winPurgeFileDeletionCommands += ")\r\n\r\n";
		
		winFile.text = winFile.text.replaceAll("(:end)", "${winPurgeFileDeletionCommands}:end")
		
		def winText = winFile.text
		def textTmp = ""
		
		winText.readLines().each {
			line ->
				if (line.startsWith("\"%JAVA_EXE%\"")) {
					textTmp += "if \"%1\" == \"daemon\" (\r\n" 
					textTmp += "   @rem start daemon\r\n"
					textTmp += "   call %DIRNAME%syd.bat %2 %3 %4\r\n"
					textTmp += ") else (\r\n"
					textTmp += "   " + line + "\r\n"
					textTmp += ")"
				}
				else {
					textTmp += line + '\n'
				}
		}
		
		winFile.text = textTmp
		
		// Update unix text
		def unixText = unixFile.text
		textTmp = ""
		
		unixText.readLines().each {
			line ->
				if (line.startsWith("exec")) {
					textTmp += "if [ \$51 = daemon ]; then         \n"
					textTmp += "  /bin/bash syd                  \n"
					textTmp += "else                             \n"
					textTmp += "   " + line                   + "\n"
					textTmp += "fi                               \n"
				}
				else {
					textTmp += line + '\n'
				}
		}
		
		unixFile.text = textTmp
	}
}

applicationDistribution.from("${rootProject.projectDir}/") {
	include "AUTHORS.md", "CHANGELOG.md", "LICENSE.md", "README.md"

	// Copy syncany/syncanyd to sy/syd
	from(files("gradle/daemon/", "${startScripts.outputDir}/")) {
		include "syncany*"
		rename(/syncany(.*)/, 'sy$1')
		into "bin"
	}
}

distTar {
	baseName = "syncany"
	version = "$applicationVersionFull"
	compression = Compression.GZIP
	extension = "tar.gz"	
}

distZip {
	baseName = "syncany"
	version = "$applicationVersionFull"
}

