apply plugin: 'application'

applicationName = "syncany"
mainClassName = "org.syncany.gui.Launcher"

dependencies {
	compile			project(':syncany-util')
	compile			project(':syncany-daemon')
	compile			project(':syncany-plugins:syncany-plugin-gui')
    
    runtime			project(':syncany-plugins:syncany-plugin-ftp')
    runtime			project(':syncany-plugins:syncany-plugin-rest')  
	runtime			project(':syncany-plugins:syncany-plugin-webdav')  
	
	runtime			project(':syncany-plugins:syncany-plugin-gui-ftp')
    runtime			project(':syncany-plugins:syncany-plugin-gui-rest')  
	runtime			project(':syncany-plugins:syncany-plugin-gui-webdav')  
	
	compile			"commons-beanutils:commons-beanutils:1.9.0"
	compile			"org.eclipse.swt:org.eclipse.swt.${getSwtLibrary()}:4.3"
	compile			"org.java-websocket:Java-WebSocket:1.3.0"
	compile			"org.eclipse.jetty:jetty-server:9.1.0.RC2"
}

task(runGui, dependsOn: 'classes', type: JavaExec) {
	main = "${mainClassName}"
	//SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOsName().startsWith("mac") ? ['-XstartOnFirstThread'] : []	
	classpath = sourceSets.main.runtimeClasspath
}


applicationDistribution.from("${rootProject.projectDir}/") {
	include "AUTHORS.md", "CHANGELOG.md", "LICENSE.md", "README.md"
}

distTar {
	baseName = "syncany"
	version = "$applicationVersionFull"
	compression = Compression.GZIP
	extension = "tar.gz"	
}

distZip {
	baseName = "syncany"
	version = "$applicationVersionFull"
}

// Windows Installer ///////////////////////////////////////////////////////////

task exe(dependsOn: ["installApp"]) << {
	def innoSetupDir = new File("${buildDir}/innosetup")

	delete innoSetupDir	
	innoSetupDir.mkdir();	
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")		
		into(innoSetupDir)
	}

	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup.iss.skel")
		rename("setup.iss.skel", "setup.iss")
		expand([
			applicationVersion: "${applicationVersion}",
			applicationVersionFull: "${applicationVersionFull}",			
		])
		into(innoSetupDir)
	}

	exec {
		workingDir rootProject.projectDir
		commandLine "iscc ${innoSetupDir}/setup.iss".split()
	}
}